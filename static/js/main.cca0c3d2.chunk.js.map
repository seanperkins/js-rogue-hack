{"version":3,"sources":["contexts/GameContext.tsx","constants/renderOrder.ts","constants/characters.ts","constants/colors.ts","TileSet.ts","contexts/DisplayContext.tsx","components/WithDisplay.tsx","components/Text.tsx","components/Button.tsx","components/Fill.tsx","components/Frame.tsx","components/DisplayWindow.tsx","screens/Menu.tsx","utilities/random.ts","components/GlitchText.tsx","components/TypingText.tsx","screens/Terminal.tsx","components/Main.tsx","contexts/LogContext.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["GameContext","createContext","GameContextProvider","children","useState","state","game","setGame","Provider","value","RenderOrder","characters","horizontalLine","verticalLine","upperRightCorner","upperLeftCorner","lowerRightCorner","lowerLeftCorner","lightShade","darkShade","darkestShade","BLACK","LIGHT_GREEN","TileSet","imageId","tileSet","tileMap","tileWidth","tileHeight","this","document","getElementById","Object","keys","presetCharMap","forEach","key","pos","i","String","fromCharCode","Math","floor","blank","lightTexture","mediumTexture","darkTexture","DisplayContext","DisplayContextProvider","display","setDisplay","width","height","displaySize","setDisplaySize","clicked","setClicked","mouseXY","setMouseXY","fillDisplay","x","y","fg","bg","c","char","f","b","ww","hh","draw","useEffect","window","tileset","getDisplaySizeFromWindow","d","Display","fontSize","spacing","layout","tileColorize","canvas","getContainer","appendChild","getOptions","currentWidth","currentHeight","replaceChildren","onClick","e","setTimeout","onMouseMove","xy","eventToPosition","debouncedOnResize","debounce","addEventListener","setHandlers","removeEventListener","removeHandlers","getCenter","dw","dh","h","w","getHalfSize","clearDisplay","drawText","text","maxWidth","ceil","length","drawGrid","grid","tile","foreground","background","drawMatrix","matrix","row","ry","cell","rx","windowWidth","innerWidth","windowHeight","innerHeight","withDisplay","Component","displayName","name","C","props","wrappedComponentRef","remainingProps","Consumer","context","invariant","ref","WrappedComponent","hoistStatics","toUpperCase","inner","innerX","innerY","actualX","actualY","isOver","mx","my","isMouseOver","title","chars","React","Children","map","child","cloneElement","shadow","useContext","buttons","label","console","log","button","getRandomChar","max","code","random","GlitchText","glitchLevel","glitchFrequency","glitched","setGlitched","handle","clearTimeout","txt","newText","RNG","getUniform","glitchText","TypingText","speed","delay","onComplete","displayText","setDisplayText","timeoutHandle","setTimeoutHandle","complete","setComplete","substring","line","setLine","handleComplete","lines","textLine","LogContext","LogContextProvider","messages","setMessages","add","type","msgs","slice","lastMessage","count","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cca0c3d2.chunk.js","sourcesContent":["import {createContext, Dispatch, SetStateAction, useState} from 'react'\nimport {GameState} from '../types'\n\ninterface IGameContext {\n  game: GameState\n  setGame: Dispatch<SetStateAction<GameState>>\n}\n\nconst GameContext = createContext<IGameContext>({} as IGameContext)\n\nexport default GameContext\n\nexport function GameContextProvider({children}) {\n  const [game, setGame] = useState<GameState>({\n    state: 'menu',\n  })\n  return (\n    <GameContext.Provider value={{game, setGame}}>\n      {children}\n    </GameContext.Provider>\n  )\n}\n","enum RenderOrder {\n  TERMINALS,\n  CORPSE,\n  ITEM,\n  ACTOR,\n}\n\nexport default RenderOrder\n","const characters = {\n  horizontalLine: 'Ä',\n  verticalLine: '³',\n  upperRightCorner: '¿',\n  upperLeftCorner: 'Ú',\n  lowerRightCorner: 'Ù',\n  lowerLeftCorner: 'À',\n\n  lightShade: '°',\n  darkShade: '±',\n  darkestShade: '²',\n}\n\nexport default characters\n","export const BLACK = '#000000'\nexport const LIGHT_GREEN = '#00FF00'\nexport const GREEN = '#149414'\nexport const YELLOW = '##FFFF00'\n","export default class TileSet {\n  tileSet: HTMLImageElement\n  tileMap: {[key: string]: [number, number]}\n  tileWidth: number\n  tileHeight: number\n  constructor(imageId: string) {\n    this.tileSet = document.getElementById(imageId) as HTMLImageElement\n    this.tileMap = {}\n    this.tileWidth = 12\n    this.tileHeight = 12\n    Object.keys(presetCharMap).forEach((key) => {\n      const pos = presetCharMap[key]\n      this.tileMap[key] = [pos[0] * this.tileWidth, pos[1] * this.tileHeight]\n    })\n    for (let i = 0; i < 256; i++) {\n      this.tileMap[String.fromCharCode(i)] = [\n        (i % 16) * this.tileWidth,\n        Math.floor(i / 16) * this.tileHeight,\n      ]\n    }\n  }\n}\n\n// This mapping just uses placement\nconst presetCharMap = {\n  blank: [0, 0],\n  lightTexture: [0, 11],\n  mediumTexture: [0, 12],\n  darkTexture: [0, 13],\n  verticalLine: [11, 11],\n  horizontalLine: [5, 13],\n}\n","import {debounce} from 'lodash'\nimport {createContext, useEffect, useState} from 'react'\nimport {Display} from 'rot-js'\n\nimport {BLACK, LIGHT_GREEN} from '../constants'\nimport TileSet from '../TileSet'\nimport {GridTiles} from '../types'\n\nconst DisplayContext = createContext(null)\n\nexport default DisplayContext\n\ndeclare global {\n  interface Window {\n    game: {\n      display: Display\n    }\n  }\n}\n\nexport const DisplayContextProvider = function ({children}) {\n  const [display, setDisplay] = useState<Display>(null)\n  const [displaySize, setDisplaySize] = useState<{\n    width: number\n    height: number\n  }>({width: 0, height: 0})\n  const [clicked, setClicked] = useState<boolean>(false)\n  const [mouseXY, setMouseXY] = useState<[number, number]>([null, null])\n  // Run once on load to set the display\n  useEffect(() => {\n    if (window.game.display) {\n      setDisplay(window.game.display)\n      return\n    }\n    const tileset = new TileSet('tileset')\n\n    const {width, height} = getDisplaySizeFromWindow(tileset)\n    setDisplaySize({width, height})\n\n    const d = new Display({\n      width: width,\n      height: height,\n      fontSize: 12,\n      spacing: 0,\n      layout: 'tile-gl',\n      tileColorize: true,\n      tileWidth: tileset.tileWidth,\n      tileHeight: tileset.tileHeight,\n      tileSet: tileset.tileSet,\n      tileMap: tileset.tileMap,\n      bg: BLACK,\n      fg: LIGHT_GREEN,\n    })\n\n    // Appending element and forcing it to be 100% of width\n    const canvas = d.getContainer()\n    const gameContainer = document.getElementById('game')\n    gameContainer.appendChild(canvas)\n\n    setDisplay(d)\n    window.game.display = d\n  }, [])\n\n  useEffect(() => {\n    if (!display) {\n      return\n    }\n    const {width, height} = displaySize\n    const {width: currentWidth, height: currentHeight} = display.getOptions()\n    if (width !== currentWidth || height !== currentHeight) {\n      const tileset = new TileSet('tileset')\n      const d = new Display({\n        width: width,\n        height: height,\n        fontSize: 12,\n        spacing: 0,\n        layout: 'tile-gl',\n        tileColorize: true,\n        tileWidth: tileset.tileWidth,\n        tileHeight: tileset.tileHeight,\n        tileSet: tileset.tileSet,\n        tileMap: tileset.tileMap,\n        bg: BLACK,\n        fg: LIGHT_GREEN,\n      })\n\n      // Appending element and forcing it to be 100% of width\n      const canvas = d.getContainer()\n      const gameContainer = document.getElementById('game')\n      gameContainer.replaceChildren(canvas)\n\n      setDisplay(d)\n      window.game.display = d\n    }\n  }, [display, displaySize])\n\n  // Used for setting handlers for mouse events\n  useEffect(() => {\n    if (!display) return\n    const setHandlers = (canvas) => {\n      canvas.addEventListener('click', onClick)\n      canvas.addEventListener('mousemove', onMouseMove)\n      window.addEventListener('resize', debouncedOnResize)\n    }\n\n    const removeHandlers = (canvas) => {\n      canvas.removeEventListener('click', onClick)\n      canvas.removeEventListener('mousemove', onMouseMove)\n      window.removeEventListener('resize', debouncedOnResize)\n    }\n\n    const onClick = (e) => {\n      setClicked(true)\n      setTimeout(() => setClicked(false), 1)\n    }\n\n    const onMouseMove = (e) => {\n      const xy = display.eventToPosition(e)\n      setMouseXY(xy)\n    }\n\n    const onResize = () => {\n      const tileset = new TileSet('tileset')\n      const {width, height} = getDisplaySizeFromWindow(tileset)\n      setDisplaySize({width, height})\n    }\n    const debouncedOnResize = debounce(onResize, 100)\n\n    const canvas = display.getContainer()\n    setHandlers(canvas)\n    return () => removeHandlers(canvas)\n  }, [display])\n\n  /**\n   * Get x, y coordinates for the top left corner of a centered rectangle or the center of the display\n   * param display - ROTJS Display object\n   * param height - Height of the rectangle you want to center\n   * param width - Width of the rectangle you want to center\n   * returns The `{x, y}` coordinates for the top left corner of the centered rectangle\n   */\n  function getCenter({height, width}: {height?: number; width?: number} = {}) {\n    const {width: dw, height: dh} = display.getOptions()\n    const h = height || 0\n    const w = width || 0\n    return [Math.floor(dw / 2 - w / 2), Math.floor(dh / 2 - h / 2)]\n  }\n\n  function getHalfSize() {\n    const {width, height} = display.getOptions()\n    return {width: Math.floor(width / 2), height: Math.floor(height / 2)}\n  }\n\n  // Clears the portion of the screen that matches the parameters\n  function clearDisplay(\n    height: number = display.getOptions().height,\n    width: number = display.getOptions().width,\n    x: number = 0,\n    y: number = 0,\n  ) {\n    fillDisplay({\n      height,\n      width,\n      x,\n      y,\n      fg: BLACK,\n      bg: BLACK,\n      char: ' ',\n    })\n  }\n\n  function fillDisplay({\n    height,\n    width,\n    x,\n    y,\n    fg,\n    bg,\n    char,\n  }: {\n    height: number\n    width: number\n    x: number\n    y: number\n    fg?: string\n    bg?: string\n    char?: string\n  }) {\n    const c = char || ' '\n    const f = fg || LIGHT_GREEN\n    const b = bg || BLACK\n    for (let ww = 0; ww < width; ww++) {\n      for (let hh = 0; hh < height; hh++) {\n        display.draw(ww + x, hh + y, c, f, b)\n      }\n    }\n  }\n\n  function drawText({\n    x,\n    y,\n    text,\n    maxWidth,\n    fg,\n    bg,\n  }: {\n    x: number\n    y: number\n    text: string\n    maxWidth?: number\n    fg?: string\n    bg?: string\n  }) {\n    const f = fg || LIGHT_GREEN\n    const b = bg || BLACK\n    display.drawText(x, y, `%c{${f}}%b{${b}}${text}`, maxWidth)\n    // Figure out how many lines the text will take up\n    if (maxWidth) {\n      return Math.ceil(text.length / maxWidth)\n    }\n    // Should only take up one if we don't define a max\n    return 1\n  }\n\n  function drawGrid({\n    grid,\n    fg,\n    bg,\n  }: {\n    grid: GridTiles\n    fg?: string\n    bg?: string\n  }) {\n    const {height, width} = display.getOptions()\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        const tile = grid[`${x},${y}`]\n        if (tile) {\n          const foreground = tile.fg || fg\n          const background = tile.bg || bg\n          display.draw(x, y, tile.char, foreground, background)\n        }\n      }\n    }\n  }\n\n  function drawMatrix({matrix, x, y}) {\n    matrix.forEach((row, ry) => {\n      row.forEach((cell, rx) => {\n        if (Object.keys(cell).length) {\n          display.draw(rx + x, ry + y, cell.char, cell.fg, cell.bg)\n        }\n      })\n    })\n  }\n\n  return (\n    <DisplayContext.Provider\n      value={{\n        display,\n        getCenter,\n        getHalfSize,\n        clearDisplay,\n        fillDisplay,\n        drawText,\n        drawGrid,\n        drawMatrix,\n        clicked,\n        mouseXY,\n        displaySize,\n      }}\n    >\n      {children}\n    </DisplayContext.Provider>\n  )\n}\n\nfunction getDisplaySizeFromWindow(tileset: TileSet) {\n  const windowWidth = window.innerWidth\n  const windowHeight = window.innerHeight\n  const width = Math.floor(windowWidth / tileset.tileWidth)\n  const height = Math.floor(windowHeight / tileset.tileHeight)\n  return {width, height}\n}\n","import hoistStatics from 'hoist-non-react-statics'\nimport invariant from 'tiny-invariant'\n\nimport DisplayContext from '../contexts/DisplayContext'\n\n/**\n * A public higher-order component to access the imperative API\n */\nfunction withDisplay(Component) {\n  const displayName = `withRouter(${Component.displayName || Component.name})`\n  const C = (props) => {\n    const {wrappedComponentRef, ...remainingProps} = props\n\n    return (\n      <DisplayContext.Consumer>\n        {(context) => {\n          invariant(\n            context,\n            `You should not use <${displayName} /> outside a <Router>`,\n          )\n          return (\n            <Component\n              {...remainingProps}\n              {...context}\n              ref={wrappedComponentRef}\n            />\n          )\n        }}\n      </DisplayContext.Consumer>\n    )\n  }\n\n  C.displayName = displayName\n  C.WrappedComponent = Component\n\n  return hoistStatics(C, Component)\n}\n\nexport default withDisplay\n","import withDisplay from './WithDisplay'\n\ninterface Props {\n  x: number\n  y: number\n  text: string\n  drawText: any\n  fg?: string\n  bg?: string\n  maxWidth?: number\n}\nfunction Text({x, y, text, drawText, fg, bg, maxWidth}: Props) {\n  drawText({x, y, text: text.toUpperCase(), fg, bg, maxWidth})\n  return null\n}\n\nexport default withDisplay(Text)\n","import {BLACK, LIGHT_GREEN} from '../constants'\nimport Text from './Text'\nimport withDisplay from './WithDisplay'\n\nfunction isMouseOver([x, y], [mx, my], [w, h]) {\n  return mx >= x && mx <= x + w && my >= y && my <= y + h\n}\n\nfunction Button({x, y, text, fg, bg, onClick, inner, mouseXY, clicked}) {\n  const foreground = fg || BLACK\n  const background = bg || LIGHT_GREEN\n  const width = text.length\n  const height = 1\n  const {x: innerX, y: innerY, width: innerWidth} = inner\n  const actualX = x + innerX\n  const actualY = y + innerY\n  const isOver = isMouseOver([actualX, actualY], mouseXY, [width, height])\n\n  if (isOver && clicked) {\n    onClick()\n  }\n\n  return (\n    <Text\n      x={actualX}\n      y={actualY}\n      text={text}\n      fg={isOver ? foreground : background}\n      bg={isOver ? background : foreground}\n      maxWidth={innerWidth}\n    />\n  )\n}\n\nexport default withDisplay(Button)\n","import {CharacterProps, ShapeProps} from '../types'\nimport withDisplay from './WithDisplay'\n\ntype FillProps = ShapeProps & Partial<CharacterProps> & {fillDisplay: any}\n\nfunction Fill({x, y, height, width, fg, bg, char, fillDisplay}: FillProps) {\n  fillDisplay({x, y, width, height, fg, bg, char})\n  return null\n}\nexport default withDisplay(Fill)\n","import withDisplay from './WithDisplay'\nimport chars from '../constants/characters'\nimport {BLACK, LIGHT_GREEN} from '../constants'\nimport {ShapeProps} from '../types'\nimport React, {Fragment} from 'react'\nimport {Display} from 'rot-js'\nimport Text from './Text'\n\ntype FrameProps = ShapeProps & {\n  children: React.ReactElement\n  title?: string\n  display: Display\n}\n\nfunction Frame({title, x, y, width, height, children, display}: FrameProps) {\n  for (let w = 0; w < width; w++) {\n    for (let h = 0; h < height; h++) {\n      let char = ' '\n\n      if (w === 0 && h === 0) {\n        char = chars.upperLeftCorner // Upper left corner\n      } else if (w === width - 1 && h === 0) {\n        char = chars.upperRightCorner // Upper right corner\n      } else if (w === 0 && h === height - 1) {\n        char = chars.lowerLeftCorner // Lower left corner\n      } else if (w === width - 1 && h === height - 1) {\n        char = chars.lowerRightCorner // Lower right corner\n      } else if (w === 0 || w === width - 1) {\n        char = chars.verticalLine // Vertical\n      } else if (h === 0 || h === height - 1) {\n        char = chars.horizontalLine // Horizontal\n      }\n      if (char !== ' ') {\n        display.draw(w + x, h + y, char, LIGHT_GREEN, BLACK) // Side\n      }\n    }\n  }\n  return (\n    <Fragment>\n      {title && <Text x={x + 1} y={y} text={title} />}\n      {children &&\n        React.Children.map(children, (child) => {\n          return React.cloneElement(child, {\n            // If the child has already been given inner props, use those\n            inner: child.props.inner\n              ? child.props.inner\n              : {\n                  x: x + 1,\n                  y: y + 1,\n                  width: width - 2,\n                  height: height - 2,\n                },\n          })\n        })}\n    </Fragment>\n  )\n}\n\nexport default withDisplay(Frame)\n","import React, {Fragment} from 'react'\nimport {BLACK, LIGHT_GREEN} from '../constants'\nimport {ShapeProps} from '../types'\nimport Fill from './Fill'\nimport Frame from './Frame'\nimport Text from './Text'\nimport withDisplay from './WithDisplay'\n\ntype WindowProps = ShapeProps & {\n  title: string\n  fg?: string\n  bg?: string\n  shadow?: boolean\n  children: React.ReactElement\n}\n\nfunction DisplayWindow({\n  title,\n  x,\n  y,\n  width,\n  height,\n  fg,\n  bg,\n  shadow,\n  children,\n}: WindowProps) {\n  const foreground = fg || LIGHT_GREEN\n  const background = bg || BLACK\n\n  return (\n    <Frame\n      x={x}\n      y={y}\n      width={width}\n      height={height}\n      fg={foreground}\n      bg={background}\n    >\n      <Fill\n        x={x + 1}\n        y={y + 1}\n        height={height - 2}\n        width={width - 2}\n        bg={background}\n        fg={foreground}\n      />\n      <Fill x={x + 1} y={y + 1} height={1} width={width - 2} bg={foreground} />\n      <Text x={x + 1} y={y + 1} text={title} fg={background} bg={foreground} />\n      {shadow && (\n        <Fragment>\n          <Fill\n            x={x + 1}\n            y={y + height}\n            height={1}\n            width={width}\n            fg={foreground}\n            bg={background}\n            char={'°'}\n          />\n          <Fill\n            x={x + width}\n            y={y + 1}\n            height={height - 1}\n            width={1}\n            fg={foreground}\n            bg={background}\n            char={'°'}\n          />\n        </Fragment>\n      )}\n      {children &&\n        React.Children.map(children, (child) => {\n          return React.cloneElement(child, {\n            inner: {\n              x: x + 1,\n              y: y + 2,\n              width: width - 3,\n              height: height - 3,\n            },\n          })\n        })}\n    </Frame>\n  )\n}\n\nexport default withDisplay(DisplayWindow)\n","import {useContext} from 'react'\nimport Button from '../components/Button'\nimport Window from '../components/DisplayWindow'\nimport withDisplay from '../components/WithDisplay'\nimport GameContext from '../contexts/GameContext'\n\nconst height = 20\nconst width = 20\n\nfunction Menu({getCenter, clearDisplay}) {\n  const {game, setGame} = useContext(GameContext)\n  clearDisplay()\n\n  const buttons = [\n    {\n      label: 'New Game',\n      onClick: () => {\n        setGame({...game, state: 'terminal'})\n      },\n    },\n    {\n      label: 'Load Game',\n      onClick: () => {\n        console.log('Load Game')\n      },\n    },\n  ]\n\n  const [x, y] = getCenter({width, height})\n\n  return (\n    <Window\n      x={x}\n      y={y}\n      width={width}\n      height={height}\n      title=\"Main Menu\"\n      shadow={true}\n    >\n      {buttons.map((button, i) => (\n        <Button\n          key={button.label}\n          text={button.label}\n          x={1}\n          y={i * 2 + 1}\n          onClick={button.onClick}\n        />\n      ))}\n    </Window>\n  )\n}\n\nexport default withDisplay(Menu)\n","export function getRandomInt(max) {\n  return Math.floor(Math.random() * max)\n}\n\nexport function getRandomChar() {\n  const code = getRandomInt(255)\n  return String.fromCharCode(code)\n}\n","import {useEffect, useState} from 'react'\nimport {RNG} from 'rot-js'\nimport {getRandomChar} from '../utilities/random'\nimport Text from './Text'\n\ninterface Props {\n  x: number\n  y: number\n  text: string\n  fg?: string\n  bg?: string\n  maxWidth?: number\n  glitchLevel?: number\n  glitchFrequency?: number\n}\nfunction GlitchText({\n  x,\n  y,\n  text,\n  fg,\n  bg,\n  maxWidth,\n  glitchLevel,\n  glitchFrequency,\n}: Props) {\n  const [glitched, setGlitched] = useState(false)\n  useEffect(() => {\n    setGlitched(true)\n  }, [])\n  useEffect(() => {\n    let handle\n    if (!glitched) {\n      handle = setTimeout(\n        () => {\n          setGlitched(true)\n        },\n        glitchFrequency ? glitchFrequency * 1000 : 5000,\n      )\n    } else {\n      handle = setTimeout(() => {\n        setGlitched(false)\n      }, 500)\n    }\n    return () => clearTimeout(handle)\n  }, [glitched, glitchFrequency])\n\n  const txt = glitched ? glitchText(text, glitchLevel) : text\n  return <Text x={x} y={y} text={txt} fg={fg} bg={bg} maxWidth={maxWidth} />\n}\n\nexport default GlitchText\n\nfunction glitchText(text: string, glitchLevel: number = 0.2) {\n  // Iterate through text string\n  let newText = ''\n  for (let i = 0; i < text.length; i++) {\n    // If a random number is less than glitchLevel, add a random character\n    if (text[i] === ' ') {\n      newText += ' '\n    } else if (RNG.getUniform() < glitchLevel) {\n      newText += getRandomChar()\n    } else {\n      newText += text[i]\n    }\n  }\n  return newText\n}\n","import {useEffect, useState} from 'react'\nimport GlitchText from './GlitchText'\n\nimport Text from './Text'\n\ninterface TypingTextProps {\n  x: number\n  y: number\n  text: string\n  maxWidth?: number\n  fg?: string\n  delay?: number\n  speed?: number\n  glitched?: boolean\n  onComplete?: () => void\n}\n\nfunction TypingText({\n  x,\n  y,\n  fg,\n  text,\n  speed,\n  delay,\n  maxWidth,\n  onComplete,\n  glitched,\n}: TypingTextProps) {\n  const [displayText, setDisplayText] = useState('')\n  const [timeoutHandle, setTimeoutHandle] = useState(null)\n  const [complete, setComplete] = useState(false)\n\n  useEffect(() => {\n    // Wait to type until the delay has passed\n    setTimeoutHandle(\n      setTimeout(() => {\n        setDisplayText(text.substring(0, displayText.length + 1))\n      }, delay || 500),\n    )\n\n    return clearTimeout(timeoutHandle)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    if (complete) return\n    setTimeoutHandle(\n      setTimeout(() => {\n        if (text !== displayText) {\n          setDisplayText(text.substring(0, displayText.length + 1))\n        } else {\n          setComplete(true)\n          if (onComplete) onComplete()\n        }\n      }, speed || 150),\n    )\n  }, [displayText, text, speed, onComplete, complete])\n  if (glitched) {\n    return (\n      <GlitchText x={x} y={y} text={displayText} fg={fg} maxWidth={maxWidth} />\n    )\n  }\n  return <Text x={x} y={y} fg={fg} text={displayText} maxWidth={maxWidth} />\n}\n\nexport default TypingText\n","import {useState} from 'react'\nimport TypingText from '../components/TypingText'\nimport withDisplay from '../components/WithDisplay'\nimport {LIGHT_GREEN} from '../constants'\n\nfunction Terminal({display, clearDisplay, getCenter, getHalfSize}) {\n  const [line, setLine] = useState(0)\n  const text = [\n    'Oh good. You seem to have booted up.',\n    'Are you receiving my input?',\n    'I think there might an issue.',\n    'Can you try to reboot?',\n  ]\n  const {width} = display.getOptions()\n\n  function handleComplete() {\n    if (line < text.length - 1) {\n      setLine(line + 1)\n    }\n  }\n\n  const lines = text.map((textLine, i) => {\n    if (i > line) return null\n    return (\n      <TypingText\n        key={i}\n        x={1}\n        y={1 + i * 2}\n        text={text[i]}\n        fg={LIGHT_GREEN}\n        maxWidth={width - 2}\n        glitched={true}\n        onComplete={handleComplete}\n      />\n    )\n  })\n\n  clearDisplay()\n  return lines\n}\n\nexport default withDisplay(Terminal)\n","import {useContext} from 'react'\nimport GameContext from '../contexts/GameContext'\nimport Menu from '../screens/Menu'\nimport Terminal from '../screens/Terminal'\nimport withDisplay from './WithDisplay'\n\nfunction Main({display}) {\n  const {game} = useContext(GameContext)\n  if (!display) return null\n  switch (game.state) {\n    case 'menu': {\n      return <Menu />\n    }\n    case 'terminal': {\n      return <Terminal />\n    }\n    default:\n      return null\n  }\n}\n\nexport default withDisplay(Main)\n","import { createContext, useState } from \"react\";\nimport { Message, MessageType } from \"../types\";\n\nconst LogContext = createContext({})\n\nexport default LogContext;\n\nexport function LogContextProvider({children}) {\n  const [messages, setMessages] = useState([]);\n\n  function add(text: string, type: MessageType = 'into') {\n    const msgs = messages.slice();\n    const lastMessage = msgs[msgs.length - 1] || ({} as Message)\n    // If the previous message is the same, increase the count\n    if (lastMessage.text === text) {\n      lastMessage.count++\n    } else {\n      msgs.push({\n        text,\n        type,\n        count: 1,\n      })\n    }\n    setMessages(msgs)\n  }\n\n  return (\n    <LogContext.Provider value={{messages, add}}>\n      {children}\n    </LogContext.Provider>\n  )\n}","import Main from './components/Main'\nimport {DisplayContextProvider} from './contexts/DisplayContext'\nimport {GameContextProvider} from './contexts/GameContext'\nimport {LogContextProvider} from './contexts/LogContext'\n\nfunction App() {\n  return (\n    <LogContextProvider>\n      <DisplayContextProvider>\n        <GameContextProvider>\n          <Main />\n        </GameContextProvider>\n      </DisplayContextProvider>\n    </LogContextProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport './style.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}